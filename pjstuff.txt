timesheet.ksionda.me (WIP name)

What is the first valuable thing you're trying to get out of this?
    -Information easily viewable/manageable
        -Projects
            -Team/individual
        -Time management
        -Employee Information
        -Daily overview (sourceable from existing data?)
        -Variable leading metric (time, progress/commits, story points) (correlated with lagging metric)
            -Time spent
            -Lines of code
            -Commits
            -Features
            -Functionality
        -Lagging metrics (unambiguous success)
        -Scoreboard
        -Accountable to the scoreboard
Can more than one project be "clocked-in" at the same time for one user?
    -Multiple projects can be worked on in a day/paramaters (scope(?), goals/milestone, issues)

Misc:
    -The hill (concept from Shape-Up)
        -Shaping vs building
    -Possible Slack integration
    Decide what database needs to know
	    -What is given to user logging in from another computer
        -Multiple teams - many-to-many relationship
        -Multiple organizations/projects

Project: timesheet project
    High-level overview
        Paper-prototype

-Data sources (what state are we tracking?)
    -What data am I feeding from the frontend

-API:
    - user (uuid) (indexing various data)
        - some means of logging in
        - some means of contact
        - cutting scope: "login" is just timesheet.ksionda.me/<uuid>/
    - projects
        - github connection information
    - leading metric count (???)
        - want some built-in stuff?
    - KEEP IN MIND
        - teams
        - organization
        - separating github from projects maybe in future if bad to couple them
        - user
            - name
            - other metadata that we don't have to worry about


Examples to look at:
    https://basecamp.com/
    Clockify
    Dovico

Graph libraries:
    -Chart.js (apparently version 3 is borked, not fully supported by React, but may have to revisit)
    -D3.js (pretty nice, low-level, capable of very interesting stuff)
        -Turns out this is amazing, can use it for literally anything
    -Plotly (easy but scarce documentation)
        -test with wrapper components
    -mpld3

API Stuff:
    -Be wary of visibility of Github token
        -Use React/Firefox local storage
    - GraphQL or normal REST/CRUD practices
    - Token stuff for authentication
        - JWT basic/bearer
    - Github SDK: https://github.com/octokit/octokit.js
        - localStorage.setItem(`token`, token); // Just set this in the JS console for right now
        - localStorage.getItem(`token`) // Just assume it's set in code

Scaffolding everything from FE:
    - https://miragejs.com/
    - https://miragejs.com/docs/advanced/graphql/

-Design
    -Daily overview
        -Make spreadsheet look nice
    -Projects
        -Organize information about individual/team projects
    -Metrics
        -"Insights"
        -Organize, figure out general view structure
        -Can graph commits by week; zoom in for daily view
        - References
            - "The Visual Display of Quantitative Information" by Tufte
                - Look at this book if you don't like the look of the graph
            - "Elements of Graphing Data" and "Visualizing Data" by William Cleveland
                - Look at this book if you don't know what kind of graph you even want
            - "Tufte shows you why it's important to do graphs well. Cleveland shows you how."
        -"Dashboard" from Clockify kind of centralizes this information well
    -Consider other relevant views and information
        -What does the employer/manager/team lead need to see?
        -How can employees input/retrieve data?
        -Employee records mutable (continue stopwatch, something else)

-Push notifications for upcoming schedule events
    -Snooze option
    -Repeated pings before/past scheduled time
-Effective way to timeblock
    -Seeing what was planned versus what was decided upon
-Templating and autofilling (maybe based on frequency of events)
    -Too tedious in Notion
-Calender not notification tool, but thing used to plan day should be and know what is in calendar
-Ask if user would like to change event or time of event before planned event occurs/approaching event
    -Fine-tuned how nagging occurs

Notion timeblock columns:
    -Time, Plan, Revision (n Revisions) (rightmost column actual decision)

TODO:
    -Fix container alignments
    -Make sidebar collapsible/compatible with mobile
    -Make stuff pretty
    -Proper date/time format

Far future (?):
    -VS Code extension?
    -React Native
